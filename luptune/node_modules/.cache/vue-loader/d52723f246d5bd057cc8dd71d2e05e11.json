{"remainingRequest":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Mentions.vue?vue&type=template&id=a67bb4fa&","dependencies":[{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Mentions.vue","mtime":1615042575411},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}