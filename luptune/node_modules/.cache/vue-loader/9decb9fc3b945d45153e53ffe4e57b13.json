{"remainingRequest":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Fonctionnalites.vue?vue&type=template&id=38af07d6&","dependencies":[{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Fonctionnalites.vue","mtime":1612467462280},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "Fonctionnalites",
      staticStyle: { "overflow-x": "hidden", width: "100%" }
    },
    [
      _vm._m(0),
      _vm._m(1),
      _vm._m(2),
      _vm._m(3),
      _vm._m(4),
      _vm._m(5),
      _c("section", { staticClass: "bg-marine-dark" }, [
        _vm._m(6),
        _c("section", { staticClass: "container px-4 mx-auto  pb-40" }, [
          _vm._m(7),
          _vm._m(8),
          _c(
            "div",
            { staticClass: "flex flex-wrap mt-20 md:mt-0 justify-center" },
            [
              _c(
                "div",
                {
                  staticClass:
                    "pl-4 pr-4 pt-4 bg-white md:w-1/2  place-items-center pb-8"
                },
                [
                  _c("div", {}, [
                    _vm._m(9),
                    _c("form", { staticClass: "mt-6" }, [
                      _vm._m(10),
                      _vm._m(11),
                      _c(
                        "div",
                        { staticClass: "flex justify-between gap-3 mt-6" },
                        [
                          _vm._m(12),
                          _c("span", { staticClass: "w-1/2" }, [
                            _c(
                              "label",
                              {
                                staticClass:
                                  "block text-xs font-semibold text-gray-600 uppercase",
                                attrs: { for: "firstname" }
                              },
                              [_vm._v(" Date ")]
                            ),
                            _c("input", {
                              staticClass:
                                "block w-full p-3 mt-2 text-gray-700 bg-gray-200 appearance-none focus:outline-none focus:bg-gray-300 focus:shadow-inner",
                              attrs: {
                                type: "date",
                                id: "start",
                                name: "trip-start",
                                min: "2021-01-01",
                                max: "2022-01-01"
                              },
                              domProps: { value: _vm.getLocaleDateString() }
                            })
                          ])
                        ]
                      ),
                      _vm._m(13),
                      _vm._m(14),
                      _c(
                        "button",
                        {
                          staticClass:
                            "mt-10 w-full py-3 mt-6 font-medium tracking-widest text-white uppercase bg-black shadow-lg focus:outline-none hover:bg-gray-900 hover:shadow-none",
                          attrs: { type: "submit" }
                        },
                        [_vm._v(" Réserver ")]
                      )
                    ])
                  ])
                ]
              )
            ]
          ),
          _vm._m(15),
          _vm._m(16)
        ])
      ]),
      _vm._m(17),
      _vm._m(18),
      _c("div", { staticClass: "bg-marine-dark" }),
      _c("Contact")
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "py-20 px-4 text-center" }, [
      _c("div", { staticClass: "w-full max-w-2xl mx-auto" }, [
        _c("span", { staticClass: "text-yellow-500 text-sm font-semibold" }, [
          _c("h1", [_vm._v("FONCTIONNALITÉS")])
        ]),
        _c(
          "h2",
          {
            staticClass:
              "text-5xl mt-2 mb-6 leading-tight font-semibold font-heading"
          },
          [_vm._v("Votre restaurant est aux portes de la numérisation")]
        ),
        _c("p", { staticClass: "text-gray-500", attrs: { href: "#" } }, [
          _vm._v("Découvrez les fonctionnalités ")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "container mx-auto py-8 px-4 mb-20" }, [
      _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
        _c("div", { staticClass: "lg:w-2/6 px-2 lg:pr-16 mb-6 lg:mb-0" }, [
          _c("div", { staticClass: "flex flex-wrap" }, [
            _c("h2", { staticClass: "text-2xl xl:text-3xl font-semibold" }, [
              _vm._v(" Créez votre site web ")
            ]),
            _c("img", {
              staticClass: "h-10 md:w-10 mx-2",
              attrs: { src: require("../assets/emoji/web_d.png"), alt: "" }
            })
          ]),
          _c("p", { staticClass: "text-yellow-500", attrs: { href: "#" } }, [
            _vm._v(
              "Moderne, classique, créatif... Un site à l'image de votre cuisine"
            )
          ])
        ]),
        _c("div", { staticClass: "xl:w-2/6 px-2 text-justify pr-6" }, [
          _c("p", { staticClass: "mb-2" }, [
            _vm._v(
              " Personnalisez le site idéal pour votre établissement grâce à une étroite coopération entre vous et nous! Des croquis à la conception, nous vous accompagnerons pour faire en sorte que vous et vos clients ayez la meilleure expérience possible."
            )
          ]),
          _c("p", { staticClass: "mb-2" }, [
            _vm._v(
              "Un contenu sur mesure pour les restaurateurs, c'est ce que nous voulons! Publiez votre menu pour en faire profiter les plus gourmands. "
            )
          ]),
          _c("p", [
            _vm._v(
              " Présentez également toute votre équipe et nouez ainsi des liens avec vos clients. Faites y figurer vos horaires d'ouverture et toutes autres informations au sujet de votre établissement! "
            )
          ])
        ]),
        _c(
          "div",
          {
            staticClass:
              "hidden xl:block lg:w-2/6 px-2 flex lg:justify-end md:justify-center lg:pl-16 lg:-my-20 pt-10 lg:pt-0 "
          },
          [
            _c("img", {
              staticClass: "w-full",
              attrs: { src: require("../assets/fulldevice.png"), alt: "" }
            })
          ]
        ),
        _c("img", {
          staticClass: "mx-auto block xl:hidden md:w-2/3 lg:w-1/2 mt-10",
          attrs: { src: require("../assets/fulldevice.png"), alt: "" }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "bg-marine-dark" }, [
      _c("section", { staticClass: "fade-in py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c(
            "h2",
            { staticClass: "text-3xl font-semibold text-center text-white" },
            [_vm._v("Trouvez de nouvelles manières de fidéliser vos clients.")]
          )
        ])
      ]),
      _c("section", { staticClass: "fade-in container px-4 mx-auto  pb-40" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c("div", { staticClass: "lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0 " }, [
            _c("div", { staticClass: "flex flex-wrap" }, [
              _c(
                "h2",
                {
                  staticClass: "text-2xl xl:text-3xl text-beige font-semibold"
                },
                [_vm._v(" Boostez vos ventes ")]
              ),
              _c("img", {
                staticClass: "w-10 h-10 mx-4",
                attrs: {
                  src: require("../assets/emoji/rocket.png"),
                  alt: "Emoji fusée"
                }
              })
            ])
          ]),
          _c("div", { staticClass: "lg:w-3/5 px-2  text-justify text-white" }, [
            _c("p", [
              _vm._v(
                "Quoi de mieux que de pouvoir partager votre savoir faire tout en vous permettant d'atteindre le plus de clients possibles ? Luptune vous permets de booster vos ventes En ces temps difficiles, ne vous laissez pas distancer et contactez-nous! "
              )
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", {}, [
      _c("section", { staticClass: "fade-in py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c("h2", { staticClass: "text-3xl font-semibold text-center" }, [
            _vm._v("Simplifiez les commandes et passez à un tout autre niveau.")
          ])
        ])
      ]),
      _c("section", { staticClass: "container px-4 mx-auto  pb-40" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c(
            "div",
            { staticClass: "fade-in lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0" },
            [
              _c("div", { staticClass: "flex flex-wrap" }, [
                _c(
                  "h2",
                  { staticClass: "text-2xl xl:text-3xl font-semibold" },
                  [_vm._v(" Commandes en ligne ")]
                ),
                _c("img", {
                  staticClass: "h-8 w-8 mx-2",
                  attrs: {
                    src: require("../assets/emoji/cc.png"),
                    alt: "Emoji commande en ligne"
                  }
                })
              ]),
              _c(
                "p",
                { staticClass: "text-yellow-500", attrs: { href: "#" } },
                [_vm._v("Passez au sans-contact avec le paiement en ligne")]
              )
            ]
          ),
          _c("div", { staticClass: "lg:w-3/5 px-2  text-justify" }, [
            _c("p", { staticClass: "mb-3" }, [
              _vm._v(
                "Grâce à Luptune, permettez à vos clients de faire leur choix directement depuis votre site et ce depuis leur téléphone, leur ordinateur, ou même leur tablette!"
              )
            ]),
            _c(
              "h3",
              {
                staticClass:
                  "fade-in text-xl mb-3 font-semibold font-semibold text-yellow-500"
              },
              [_vm._v("Pour eux:")]
            ),
            _c("p", { staticClass: "mb-3" }, [
              _vm._v(
                "Vos clients pourrons alors choisir leur commande parmi les choix que vous avez proposés, cela leur donnera alors un total à payer à la fin de leurs choix! Ils pourront également vous laisser un commentaire au sujet de leur commande pour vous apporter plus de précision. "
              )
            ]),
            _c(
              "h3",
              {
                staticClass:
                  "fade-in text-xl mb-3 font-semibold font-semibold text-yellow-500"
              },
              [_vm._v("Pour vous:")]
            ),
            _c("p", [
              _vm._v(
                "En donnant leurs noms lors de leur commande vous pourrez garder une trace de vos clients depuis notre interface. Avec leur adresse, il vous sera possible de livrer si cela est désiré tout en les maintenants informés grâce à leur numéro de téléphone. De plus, il vous sera possible d'attribuer un statut à chacune des commandes. "
              )
            ])
          ])
        ]),
        _c("section", { staticClass: "fade-in py-20 px-4 " }, [
          _c("div", { staticClass: "max-w-3xl mx-auto" }, [
            _c("br"),
            _c(
              "h2",
              {
                staticClass:
                  "text-3xl font-semibold text-center rounded-full py-4 bg-marine-dark text-beige"
              },
              [_vm._v("Commandes côté client ")]
            )
          ])
        ]),
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c(
            "div",
            {
              staticClass:
                "fade-in py-20 lg:w-3/5 px-2 lg:pr-16 mb-6 lg:mb-0 lg:pt-24 lg:pb-10",
              attrs: { id: "menu" }
            },
            [
              _c("div", { staticClass: "flex flex-wrap" }, [
                _c("div", { staticClass: "w-full lg:w-6/12 " }, [
                  _c("h2", { staticClass: "text-4xl font-bold text-black" }, [
                    _vm._v("Le four à pizza")
                  ]),
                  _c(
                    "h2",
                    { staticClass: "text-2xl font-semibold text-black py-4" },
                    [_vm._v("Nos pizzas traditionnelles")]
                  ),
                  _c(
                    "p",
                    {
                      staticClass:
                        "text-md leading-relaxed mb-4 text-gray-500 text-justify"
                    },
                    [
                      _vm._v(
                        " Choisissez parmi nos délicieuses pizzas, celles qui vont égayer vos papilles ce soir. Commandez en ligne et venez récupérer votre commande. "
                      )
                    ]
                  )
                ])
              ]),
              _c("div", { staticClass: "flex flex-wrap mt-8" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "grid grid-cols-1 sm:grid-cols-6 md:grid-cols-6 lg:grid-cols-6 xl:grid-cols-6 gap-4"
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-1 xl:col-span-1" },
                      [
                        _c("img", {
                          staticClass: "h-20 w-20 rounded  mx-auto",
                          attrs: {
                            alt: "pizza vegan à commander",
                            src: "https://source.unsplash.com/gUBJ9vSlky0"
                          }
                        })
                      ]
                    ),
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-4 xl:col-span-4" },
                      [
                        _c("h3", { staticClass: "font-semibold text-black" }, [
                          _vm._v("Vegan")
                        ]),
                        _c(
                          "p",
                          { staticClass: "italic text-sm text-gray-500" },
                          [
                            _vm._v(
                              " Tomates, courgettes, aubergine, poivron, champignons, basilic, huile d'Olive "
                            )
                          ]
                        )
                      ]
                    ),
                    _c(
                      "div",
                      {
                        staticClass:
                          "col-span-2 sm:col-span-1 xl:col-span-1 italic "
                      },
                      [_vm._v("22€")]
                    ),
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-1 xl:col-span-1" },
                      [
                        _c("img", {
                          staticClass: "h-20 w-20  rounded  mx-auto",
                          attrs: {
                            alt: "pizza mozzarella à commander",
                            src: "https://source.unsplash.com/UxRhrU8fPHQ"
                          }
                        })
                      ]
                    ),
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-4 xl:col-span-4" },
                      [
                        _c("h3", { staticClass: "font-semibold text-black" }, [
                          _vm._v("Mozzarella")
                        ]),
                        _c(
                          "p",
                          { staticClass: "italic text-sm text-gray-500" },
                          [
                            _vm._v(
                              " Tomates, mozzarella, parmesan, basilic, huile d'olive "
                            )
                          ]
                        )
                      ]
                    ),
                    _c(
                      "div",
                      {
                        staticClass:
                          "col-span-2 sm:col-span-1 xl:col-span-1 italic "
                      },
                      [_vm._v("16€")]
                    ),
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-1 xl:col-span-1" },
                      [
                        _c("img", {
                          staticClass: "h-20 w-20  rounded  mx-auto",
                          attrs: {
                            alt: "pizza pepperoni à commander",
                            src: "https://source.unsplash.com/uU0Anw-8Vsg"
                          }
                        })
                      ]
                    ),
                    _c(
                      "div",
                      { staticClass: "col-span-2 sm:col-span-4 xl:col-span-4" },
                      [
                        _c("h3", { staticClass: "font-semibold text-black" }, [
                          _vm._v("Pepperoni")
                        ]),
                        _c(
                          "p",
                          { staticClass: "italic text-sm text-gray-500" },
                          [
                            _vm._v(
                              " Tomates, pepperoni, piment, basilic, huile pimentée "
                            )
                          ]
                        )
                      ]
                    ),
                    _c(
                      "div",
                      {
                        staticClass:
                          "col-span-2 sm:col-span-1 xl:col-span-1 italic "
                      },
                      [_vm._v("18€")]
                    )
                  ]
                )
              ])
            ]
          ),
          _c(
            "div",
            {
              staticClass:
                "fade-in w-full py-20 lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0 lg:pt-24 lg:pb-10"
            },
            [
              _c(
                "h2",
                {
                  staticClass:
                    "text-center tracking-widest text-xl font-semibold"
                },
                [_vm._v("Le four à pizza")]
              ),
              _c(
                "h2",
                { staticClass: "text-center tracking-widest text-md pb-10" },
                [_vm._v("Mon panier")]
              ),
              _c(
                "h2",
                {
                  staticClass: "text-left tracking-widest text-sm font-semibold"
                },
                [
                  _vm._v("Nom Prénom : "),
                  _c("span", { staticClass: "font-normal" }, [
                    _vm._v("Dupont Sarah")
                  ])
                ]
              ),
              _c(
                "h2",
                {
                  staticClass: "text-left tracking-widest text-sm font-semibold"
                },
                [
                  _vm._v("Adresse: "),
                  _c("span", { staticClass: "font-normal" }, [
                    _vm._v("10 Montée des Moulins,13620 Carry-le-Rouet")
                  ])
                ]
              ),
              _c(
                "h2",
                {
                  staticClass: "text-left tracking-widest text-sm font-semibold"
                },
                [
                  _vm._v("Tél : "),
                  _c("span", { staticClass: "font-normal" }, [
                    _vm._v("+33 6 58 92 44 05")
                  ])
                ]
              ),
              _c(
                "div",
                {
                  staticClass:
                    "bg-white shadow overflow-hidden sm:rounded-b py-4"
                },
                [
                  _c("ul", { staticClass: "py-10 divide-y divide-gray-250" }, [
                    _c("li", [
                      _c("a", { staticClass: "block" }, [
                        _c("div", { staticClass: "px-4 py-4 sm:px-6" }, [
                          _c(
                            "div",
                            {
                              staticClass: "flex items-center justify-between"
                            },
                            [
                              _c(
                                "p",
                                {
                                  staticClass:
                                    "tracking-widest text-sm truncate font-semibold"
                                },
                                [_vm._v(" Choix ")]
                              ),
                              _c(
                                "div",
                                { staticClass: "ml-2 flex-shrink-0 flex" },
                                [
                                  _c(
                                    "p",
                                    {
                                      staticClass:
                                        "px-2 inline-flex text-sm leading-5 tracking-widest truncate font-semibold"
                                    },
                                    [_vm._v(" Prix ")]
                                  )
                                ]
                              )
                            ]
                          )
                        ])
                      ])
                    ]),
                    _c("li", [
                      _c("a", { staticClass: "block hover:bg-gray-200" }, [
                        _c("div", { staticClass: "px-4 py-4 sm:px-6" }, [
                          _c(
                            "div",
                            {
                              staticClass: "flex items-center justify-between"
                            },
                            [
                              _c(
                                "p",
                                {
                                  staticClass:
                                    "text-sm tracking-widest italic truncate"
                                },
                                [
                                  _vm._v(" Vegan "),
                                  _c("br"),
                                  _vm._v(" "),
                                  _c(
                                    "span",
                                    { staticClass: "text-xs text-gray-500" },
                                    [_vm._v("Quantité : 1")]
                                  )
                                ]
                              ),
                              _c(
                                "span",
                                {
                                  staticClass:
                                    "pr-2 ml-2 flex-shrink-0 flex inline-flex text-xs leading-5 font-semibold text-green-600 truncate"
                                },
                                [_vm._v(" 22€ ")]
                              )
                            ]
                          )
                        ])
                      ])
                    ]),
                    _c("li", [
                      _c("a", { staticClass: "block hover:bg-gray-200" }, [
                        _c("div", { staticClass: "px-4 py-4 sm:px-6" }, [
                          _c(
                            "div",
                            {
                              staticClass: "flex items-center justify-between"
                            },
                            [
                              _c(
                                "p",
                                {
                                  staticClass:
                                    "text-sm tracking-widest italic truncate"
                                },
                                [
                                  _vm._v(" Mozzarella "),
                                  _c("br"),
                                  _vm._v(" "),
                                  _c(
                                    "span",
                                    { staticClass: "text-xs text-gray-500" },
                                    [_vm._v("Quantité : 2")]
                                  )
                                ]
                              ),
                              _c(
                                "span",
                                {
                                  staticClass:
                                    "pr-2 ml-2 flex-shrink-0 flex inline-flex text-xs leading-5 font-semibold text-green-600 truncate"
                                },
                                [_vm._v(" 32€ ")]
                              )
                            ]
                          )
                        ])
                      ])
                    ]),
                    _c("li", [
                      _c("a", { staticClass: "block hover:bg-gray-50" }, [
                        _c("div", { staticClass: "px-4 py-4 sm:px-6" }, [
                          _c(
                            "div",
                            {
                              staticClass: "flex items-center justify-between"
                            },
                            [
                              _c(
                                "p",
                                {
                                  staticClass:
                                    "text-sm font-thin tracking-widest truncate font-semibold"
                                },
                                [_vm._v(" TOTAL TTC ")]
                              ),
                              _c(
                                "div",
                                { staticClass: "ml-2 flex-shrink-0 flex" },
                                [
                                  _c(
                                    "p",
                                    {
                                      staticClass:
                                        "px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"
                                    },
                                    [_vm._v(" 54€ ")]
                                  )
                                ]
                              )
                            ]
                          )
                        ])
                      ])
                    ])
                  ])
                ]
              ),
              _c("div", { staticClass: "text-center md:text-center" }, [
                _c(
                  "a",
                  {
                    staticClass:
                      "w-full inline-block py-4 px-20 leading-none text-white bg-black hover:bg-marine-dark hover:text-white border border-beige font-semibold rounded shadow"
                  },
                  [_vm._v(" Payer ")]
                )
              ])
            ]
          )
        ])
      ]),
      _c("section", { staticClass: "fade-in py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c(
            "h2",
            {
              staticClass:
                "text-3xl font-semibold text-center rounded-full py-4 bg-marine-dark text-beige"
            },
            [_vm._v("Commandes côté restaurateur ")]
          )
        ])
      ]),
      _c("div", { staticClass: "fade-in container mx-auto px-4" }, [
        _c(
          "table",
          {
            staticClass:
              "container mx-auto px-4 border-collapse w-full text-center"
          },
          [
            _c("thead", [
              _c("tr", [
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("N° Commande")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Client")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Date")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Détails")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Statut")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Actions")]
                )
              ])
            ]),
            _c("tbody", [
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 md:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("N° Commande")]
                      ),
                      _c("div", { staticClass: "mt-6 md:mt-0" }),
                      _c(
                        "span",
                        {
                          staticClass:
                            "bg-green-100 text-green-800 font-bold text-lg"
                        },
                        [_vm._v("[NOUVEAU]")]
                      ),
                      _c(
                        "span",
                        { staticClass: "text-black font-bold text-lg" },
                        [_vm._v(" #137")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Client")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c(
                        "div",
                        { staticClass: "lg:text-left md:text-center" },
                        [
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Nom Prénom : ")]
                          ),
                          _vm._v(" Dupont Sarah "),
                          _c("br"),
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Adresse : ")]
                          ),
                          _vm._v(" 10 Montée des Moulins, "),
                          _c("br"),
                          _vm._v(" 13620 Carry-le-Rouet "),
                          _c("br"),
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Tél : ")]
                          ),
                          _vm._v(" +33 6 58 92 44 05 ")
                        ]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Date")]
                      ),
                      _vm._v(" 22/01/2021 19:02 ")
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Détails")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c("div", { staticClass: "text-center lg:text-left" }, [
                        _c(
                          "span",
                          { staticClass: "text-black text-md font-semibold" },
                          [_vm._v("Pizza : "), _c("br")]
                        ),
                        _vm._v(" Veggie (x2) "),
                        _c("br"),
                        _vm._v(" Mozzarella (x1)"),
                        _c("br"),
                        _c("div", {
                          staticClass: "mb-2 mt-2 border-b border-gray-250"
                        }),
                        _c(
                          "div",
                          {
                            staticClass:
                              "w-full lg:max-w-md md:text-center pb-6 lg:pb-0 md:pb-6"
                          },
                          [
                            _c(
                              "span",
                              {
                                staticClass:
                                  "text-black text-md font-semibold y-10 "
                              },
                              [_vm._v("Message du client : "), _c("br")]
                            ),
                            _c("p", { staticClass: "text-gray-500 italic " }, [
                              _vm._v(
                                "Bonjour je suis allergique aux poivrons, je souhaiterais les faire retirer des pizzas. Merci !"
                              )
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Statut")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "bg-gray-300 text-gray-800 rounded-full text-sm py-1 px-2"
                        },
                        [_vm._v("Attente")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Actions")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c(
                        "div",
                        { staticClass: "flex space-x-2 justify-center" },
                        [
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-gray-300 text-gray-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Attente")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-yellow-200 text-yellow-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("En Cours")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-green-200 text-green-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Prête")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-red-200 text-red-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Annuler")]
                          )
                        ]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 md:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-20 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("N° Commande")]
                      ),
                      _c("div", { staticClass: "mt-6 md:mt-0" }),
                      _c("span", {
                        staticClass:
                          "bg-green-100 text-green-800 font-bold text-lg"
                      }),
                      _c(
                        "span",
                        { staticClass: "text-black font-bold text-lg" },
                        [_vm._v(" #136")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Client")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c(
                        "div",
                        { staticClass: "lg:text-left md:text-center" },
                        [
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Nom Prénom : ")]
                          ),
                          _vm._v(" Herbaut Mathieu "),
                          _c("br"),
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Adresse : ")]
                          ),
                          _vm._v(" 4 Chemin des Diligences, "),
                          _c("br"),
                          _vm._v(" 13620 Carry-le-Rouet "),
                          _c("br"),
                          _c(
                            "span",
                            { staticClass: "text-black text-md font-semibold" },
                            [_vm._v("Tél : ")]
                          ),
                          _vm._v(" +33 6 43 40 17 58 ")
                        ]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Date")]
                      ),
                      _vm._v(" 22/01/2021 18:47 ")
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Détails")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c("div", { staticClass: "text-center lg:text-left" }, [
                        _c(
                          "span",
                          { staticClass: "text-black text-md font-semibold" },
                          [_vm._v("Plat : "), _c("br")]
                        ),
                        _vm._v(" Tartare au saumon (x2) "),
                        _c(
                          "p",
                          { staticClass: "text-sm text-gray-500 italic" },
                          [_vm._v("(1x légumes, 1x riz)")]
                        ),
                        _c("br"),
                        _c(
                          "span",
                          { staticClass: "text-black text-md font-semibold" },
                          [_vm._v("Dessert : "), _c("br")]
                        ),
                        _vm._v(" Fondant au chocolat (x1) "),
                        _c("br"),
                        _vm._v(" Tiramisu au café (x1) ")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Statut")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "bg-yellow-200 text-yellow-800 rounded-full text-sm py-1 px-2"
                        },
                        [_vm._v("En Cours")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Actions")]
                      ),
                      _c("div", { staticClass: "mt-10 md:mt-0" }),
                      _c(
                        "div",
                        { staticClass: "flex space-x-2 justify-center" },
                        [
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-gray-300 text-gray-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Attente")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-yellow-200 text-yellow-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("En Cours")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-green-200 text-green-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Prête")]
                          ),
                          _c(
                            "a",
                            {
                              staticClass:
                                "bg-red-200 text-red-800 rounded-full text-sm py-1 px-2"
                            },
                            [_vm._v("Annuler")]
                          )
                        ]
                      )
                    ]
                  )
                ]
              )
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "mb-20" })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "bg-marine-dark" }, [
      _c("section", { staticClass: "fade-in py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c(
            "h2",
            { staticClass: "text-3xl font-semibold text-center text-white" },
            [_vm._v("Vous allez adorer ce système autonome.")]
          )
        ])
      ]),
      _c("section", { staticClass: "container px-4 mx-auto md:pb-20" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c(
            "div",
            { staticClass: "fade-in lg:w-2/6 px-2 lg:pr-16 mb-6 lg:mb-0" },
            [
              _c("div", { staticClass: "flex flex-wrap" }, [
                _c(
                  "h2",
                  {
                    staticClass: "text-2xl xl:text-3xl font-semibold text-beige"
                  },
                  [_vm._v(" Click & Collect ")]
                ),
                _c("img", {
                  staticClass: "h-12 md:w-12 mx-4",
                  attrs: {
                    src: require("../assets/emoji/mask.png"),
                    alt: "Emoji click & collect"
                  }
                })
              ]),
              _c(
                "p",
                { staticClass: "text-yellow-500", attrs: { href: "#" } },
                [_vm._v("Gestion des commandes, retrait au restaurant ... ")]
              )
            ]
          ),
          _c(
            "div",
            { staticClass: "xl:w-2/6 px-2  lg:mt-6 text-justify text-white" },
            [
              _c("p", [
                _vm._v(
                  "Avec cette solution, vos clients peuvent venir eux même chercher leur commande effectuée en ligne, vous n'avez même pas besoin de les prévenirs de vous-même! Indiquez simplement la commande comme prête et ils recevront un SMS avec toutes les informations nécessaires."
                )
              ])
            ]
          ),
          _c("img", {
            staticClass:
              "fade-in pt-6 xl:pt-0 lg:pt-0 w-full md:w-1/2 lg:w-96 xl:w-2/6 xl:flex xl:justify-end mx-auto md:mt-24 xl:mt-0 xl:pl-4 md:-my-20 ",
            attrs: { src: require("../assets/AvecMess2.png"), alt: "" }
          })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "pb-20" }, [
      _c("section", { staticClass: "fade-in py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c("h2", { staticClass: "text-3xl font-semibold text-center" }, [
            _vm._v(
              "Gardez un suivi de chaque client ayant goûté votre cuisine auprès de vous!"
            )
          ])
        ])
      ]),
      _c("section", { staticClass: "container px-4 mx-auto  pb-40" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c("div", { staticClass: "lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0" }, [
            _c("div", { staticClass: "fade-in flex flex-wrap" }, [
              _c("h2", { staticClass: "text-2xl xl:text-3xl font-semibold" }, [
                _vm._v(" Listing clients ")
              ]),
              _c("img", {
                staticClass:
                  "h-12 md:w-12 mx-4 mb-2 bg-marine-dark rounded rounded-full",
                attrs: {
                  src: require("../assets/emoji/human.png"),
                  alt: "Emoji listing client"
                }
              })
            ]),
            _c("p", { staticClass: "text-yellow-500", attrs: { href: "#" } }, [
              _vm._v("Gérez vos fiches clients et consultez leurs informations")
            ])
          ]),
          _c("div", { staticClass: "lg:w-3/5 px-2  text-justify" }, [
            _c("p", [
              _vm._v(
                "Accédez à une interface vous donnant un suivi de chaque client. Les informations enregistrées sont celles fournies lors d'une réservation, d'une commande en ligne ou encore d'une commande en Click & Collect. Cela vous permettra de pouvoir gérer la fidélité de ces derniers et même de contrôler si un client annule trop souvent par exemple!"
              )
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "container mx-auto px-4" }, [
        _c(
          "table",
          {
            staticClass:
              "fade-in container mx-auto px-4 border-collapse w-full text-center"
          },
          [
            _c("thead", [
              _c("tr", [
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Nom Prénom")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Adresse")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Téléphone")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("E-mail")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Réservations")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Annulations")]
                )
              ])
            ]),
            _c("tbody", [
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 lg:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Dupont Sarah")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Adresse")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" 10 Montée des Moulins, "),
                        _c("br"),
                        _vm._v(" 13620 Carry-le-Rouet")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 58 92 44 05")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" sarah.dupont@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Réservations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-green-800 bg-green-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("2")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Annulations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-red-800 bg-red-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("0")]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 lg:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Herbaut Mathieu")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Adresse")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" 4 Chemin des Diligences, "),
                        _c("br"),
                        _vm._v(" 13620 Carry-le-Rouet")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 43 40 17 58")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" mathieu.herbaut@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Réservations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-green-800 bg-green-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("5")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Annulations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-red-800 bg-red-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("1")]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 lg:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Prost Alain")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Adresse")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" 7 Avenue Aristide Briand , "),
                        _c("br"),
                        _vm._v(" 13620 Carry-le-Rouet")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 19 22 13 09")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" alain.prost@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Réservations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-green-800 bg-green-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("1")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Annulations")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-md text-red-800 bg-red-200 rounded-full px-3 py-1"
                        },
                        [_vm._v("0")]
                      )
                    ]
                  )
                ]
              )
            ])
          ]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "py-20 px-4 " }, [
      _c("div", { staticClass: "fade-in max-w-3xl mx-auto" }, [
        _c(
          "h2",
          { staticClass: "text-3xl font-semibold text-center text-white" },
          [_vm._v("Rassemblez toutes vos réservations en un endroit!")]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
      _c(
        "div",
        { staticClass: "fade-in lg:w-2/5 px-2 lg:pr-16 lg:mb-0 pb-10" },
        [
          _c("div", { staticClass: "flex flex-wrap" }, [
            _c(
              "h2",
              { staticClass: "text-2xl xl:text-3xl font-semibold text-beige" },
              [_vm._v(" Gérez vos réservations ")]
            ),
            _c("img", {
              staticClass: "h-14 md:w-10 md:h-10 mx-2",
              attrs: { src: require("../assets/emoji/note.png"), alt: "" }
            })
          ]),
          _c("p", { staticClass: "text-yellow-500", attrs: { href: "#" } }, [
            _vm._v(
              "Qui? Quand? Où? Sachez l'heure, la date et assignez les tables "
            )
          ])
        ]
      ),
      _c("div", { staticClass: "lg:w-3/5 px-2  text-justify text-white" }, [
        _c("p", [
          _vm._v(
            "Gardez à l'oeil vos réservations et permettez à vos clients de réserver facilement une table à la date et heure de leur souhait s'il en reste de disponibles. Vous pouvez même assigner un serveur et une table en particulier à une réservation si vous le souhaitez. De votre côté vous pouvez également annuler une réservation. (En attente, confirmée et annulée). Chaque réservation doit être confirmée par vous. Un sms automatique sera envoyé au client avant le jour de la réservation. Sachez que la manière dont vous voulez gérer les personnes qui ne se présentent pas aux réservations dépendra entièrement de vos choix."
          )
        ]),
        _c("br"),
        _c("div", { staticClass: "fade-in" }, [
          _c("p", { staticClass: "text-xl mb-3 font-semibold text-beige" }, [
            _vm._v(" Placer vos clients : ")
          ]),
          _c("p", [
            _vm._v(
              "Lorsqu'une réservation est faite, il vous est possible d'attribuer une table à cette dernière. Depuis votre site, rentrez vos numéros de table afin de les utiliser pour placer virtuellement vos clients. "
            )
          ]),
          _c("br")
        ]),
        _c("div", { staticClass: "fade-in" }, [
          _c("p", { staticClass: "text-xl mb-3 font-semibold text-beige" }, [
            _vm._v(" Assigner un serveur à une table : ")
          ]),
          _c("p", [
            _vm._v(
              " Pour chaque réservation et table, vous pourrez y assigner un serveur. Depuis votre site, rentrez les noms de vos superbes serveurs afin de les assigner à une table. "
            )
          ]),
          _c("br")
        ]),
        _c("div", { staticClass: "fade-in" }, [
          _c("p", { staticClass: "text-xl mb-3 font-semibold text-beige" }, [
            _vm._v(" Gagner du temps : ")
          ]),
          _c("p", [
            _vm._v(
              " Vous n'aurez plus besoin de noter toutes vos réservations dans un cahier. Les réservations s'ajoutent automatiquement ! Nom, prénom, téléphone, couverts et date, accéder aux informations cruciales à tous moments et de n'importe où. Plus de ratures pour une réservation annulée. Garder un espace de travail propre, un seul clic suffit pour annuler une réservation. "
            ),
            _c("br"),
            _c("br"),
            _vm._v(
              " Grâce au tableau des réservations, vous pourrez visualiser directement où sont placés vos clients et qui s'occupe d'eux. Gagner du temps lors de l'organisation de vos services !"
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "py-20 px-4 " }, [
      _c("div", { staticClass: "fade-in max-w-3xl mx-auto" }, [
        _c("br"),
        _c(
          "h2",
          {
            staticClass:
              "text-3xl font-semibold text-center rounded-full py-4 bg-beige text-marine-dark"
          },
          [_vm._v("Réservation côté client ")]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "flex flex-wrap justify-center" }, [
      _c("h2", { staticClass: "text-lg font-bold" }, [_vm._v("Bonjour")]),
      _c("img", {
        staticClass: "h-6 mx-2",
        attrs: { src: require("../assets/emoji/whand.png"), alt: "" }
      }),
      _c("h2", { staticClass: "block lg:hidden" }, [
        _vm._v(", remplissez le formulaire ")
      ]),
      _c("h2", { staticClass: "block lg:hidden" }, [
        _vm._v(" pour réserver votre table.")
      ]),
      _c("h2", { staticClass: "hidden lg:block" }, [
        _vm._v(", remplissez le formulaire pour réserver votre table. ")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "flex justify-between gap-3" }, [
      _c("span", { staticClass: "w-1/2" }, [
        _c(
          "label",
          {
            staticClass: "block text-xs font-semibold text-gray-600 uppercase",
            attrs: { for: "firstname" }
          },
          [_vm._v("Nom")]
        ),
        _c("input", {
          staticClass:
            "block w-full p-3 mt-2 text-gray-700 bg-gray-200 appearance-none focus:outline-none focus:bg-gray-300 focus:shadow-inner",
          attrs: {
            id: "firstname",
            type: "text",
            name: "firstname",
            autocomplete: "family-name",
            required: ""
          }
        })
      ]),
      _c("span", { staticClass: "w-1/2" }, [
        _c(
          "label",
          {
            staticClass: "block text-xs font-semibold text-gray-600 uppercase",
            attrs: { for: "lastname" }
          },
          [_vm._v("Prénom")]
        ),
        _c("input", {
          staticClass:
            "block w-full p-3 mt-2 text-gray-700 bg-gray-200 appearance-none focus:outline-none focus:bg-gray-300 focus:shadow-inner",
          attrs: {
            id: "lastname",
            type: "text",
            name: "lastname",
            autocomplete: "given-name",
            required: ""
          }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "flex justify-between gap-3 mt-6" }, [
      _c("span", { staticClass: "w-1/2" }, [
        _c(
          "label",
          {
            staticClass: "block text-xs font-semibold text-gray-600 uppercase",
            attrs: { for: "firstname" }
          },
          [_vm._v("E-mail")]
        ),
        _c("input", {
          staticClass:
            "block w-full p-3 mt-2 text-gray-700 bg-gray-200 appearance-none focus:outline-none focus:bg-gray-300 focus:shadow-inner",
          attrs: {
            id: "email",
            type: "email",
            name: "email",
            autocomplete: "email",
            required: ""
          }
        })
      ]),
      _c("span", { staticClass: "w-1/2" }, [
        _c(
          "label",
          {
            staticClass: "block text-xs font-semibold text-gray-600 uppercase",
            attrs: { for: "lastname" }
          },
          [_vm._v("Téléphone")]
        ),
        _c("input", {
          staticClass:
            "block w-full p-3 mt-2 text-gray-700 bg-gray-200 appearance-none focus:outline-none focus:bg-gray-300 focus:shadow-inner",
          attrs: {
            id: "tel",
            type: "text",
            name: "lastname",
            autocomplete: "tel",
            required: ""
          }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("span", { staticClass: "w-1/2" }, [
      _c(
        "label",
        {
          staticClass: "block text-xs font-semibold text-gray-600 uppercase",
          attrs: { for: "firstname" }
        },
        [_vm._v("Nombre de personnes")]
      ),
      _c(
        "select",
        {
          staticClass:
            "mt-2 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-200 focus:border-gray-500 rounded focus:outline-none",
          attrs: { required: "", name: "subject" }
        },
        [
          _c("option", { attrs: { value: "1" } }, [_vm._v("1")]),
          _c("option", { attrs: { selected: "", value: "2" } }, [_vm._v("2")]),
          _c("option", { attrs: { value: "3" } }, [_vm._v("3")]),
          _c("option", { attrs: { value: "4" } }, [_vm._v("4")]),
          _c("option", { attrs: { value: "5" } }, [_vm._v("5")]),
          _c("option", { attrs: { value: "6" } }, [_vm._v("6")]),
          _c("option", { attrs: { value: "7" } }, [_vm._v("7")]),
          _c("option", { attrs: { value: "8" } }, [_vm._v("8")]),
          _c("option", { attrs: { value: "9" } }, [_vm._v("9")]),
          _c("option", { attrs: { value: "10" } }, [_vm._v("10")]),
          _c("option", { attrs: { value: "11" } }, [_vm._v("11")]),
          _c("option", { attrs: { value: "plus" } }, [_vm._v("Plus")])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-6 " }, [
      _c("h2", { staticClass: "text-black font-semibold mt-4" }, [
        _vm._v("Midi")
      ]),
      _c("div", { staticClass: "text-center" }, [
        _c("div", { staticClass: "flex justify-between gap-3 mt-6" }, [
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("12:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("12:15")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("12:30")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("12:45")]
            )
          ])
        ]),
        _c("div", { staticClass: "flex justify-between gap-3 mt-6" }, [
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("13:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("13:30")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("14:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-6" }, [
      _c("h2", { staticClass: "text-black font-semibold " }, [_vm._v("Soir")]),
      _c("div", { staticClass: "text-center" }, [
        _c("div", { staticClass: "flex justify-between gap-3 mt-6" }, [
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("19:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("19:30")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("20:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("20:30")]
            )
          ])
        ]),
        _c("div", { staticClass: "flex justify-between gap-3 mt-6" }, [
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("21:00")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }, [
            _c(
              "a",
              { staticClass: "bg-black text-white rounded-md px-2 py-2" },
              [_vm._v("21:30")]
            )
          ]),
          _c("span", { staticClass: "w-1/4" }),
          _c("span", { staticClass: "w-1/4" })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "py-20 px-4 " }, [
      _c("div", { staticClass: "fade-in max-w-3xl mx-auto" }, [
        _c("br"),
        _c(
          "h2",
          {
            staticClass:
              "text-3xl font-semibold text-center rounded-full py-4 bg-beige text-marine-dark"
          },
          [_vm._v("Réservation côté restaurateur ")]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", {}, [
      _c("div", {}, [
        _c(
          "table",
          {
            staticClass:
              "fade-in container mx-auto px-4 border-collapse w-full text-center"
          },
          [
            _c("thead", [
              _c("tr", [
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Nom "), _c("br"), _vm._v(" Prénom")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Couverts")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Téléphone")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("E-mail")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("N° Table")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Serveur")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Statut")]
                ),
                _c(
                  "th",
                  {
                    staticClass:
                      "p-3 font-bold uppercase bg-gray-200 text-gray-600 border border-gray-300 hidden lg:table-cell"
                  },
                  [_vm._v("Annuler")]
                )
              ])
            ]),
            _c("tbody", [
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 lg:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Dupont Sarah")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nombre personnes")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("2")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 58 92 44 05")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black text-md " }, [
                        _vm._v(" sarah.dupont@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("N° Table")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c(
                              "option",
                              { attrs: { disabled: "", selected: "" } },
                              [_vm._v("Choix table")]
                            ),
                            _c("option", { attrs: { value: "1" } }, [
                              _vm._v("1")
                            ]),
                            _c("option", { attrs: { value: "2" } }, [
                              _vm._v("2")
                            ]),
                            _c("option", { attrs: { value: "3" } }, [
                              _vm._v("3")
                            ]),
                            _c("option", { attrs: { value: "4" } }, [
                              _vm._v("4")
                            ]),
                            _c("option", { attrs: { value: "5" } }, [
                              _vm._v("5")
                            ]),
                            _c("option", { attrs: { value: "6" } }, [
                              _vm._v("6")
                            ]),
                            _c("option", { attrs: { value: "7" } }, [
                              _vm._v("7")
                            ]),
                            _c("option", { attrs: { value: "8" } }, [
                              _vm._v("8")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Serveur")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c(
                              "option",
                              { attrs: { disabled: "", selected: "" } },
                              [_vm._v("Choix serveur")]
                            ),
                            _c("option", { attrs: { value: "Max" } }, [
                              _vm._v("Max")
                            ]),
                            _c("option", { attrs: { value: "Pat" } }, [
                              _vm._v("Pat")
                            ]),
                            _c("option", { attrs: { value: "Lisa" } }, [
                              _vm._v("Lisa")
                            ]),
                            _c("option", { attrs: { value: "Loulou" } }, [
                              _vm._v("Loulou")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("STATUT")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-gray-800 text-md bg-gray-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" Attente ")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("ANNULER")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-black text-md text-red-800 text-md bg-red-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" X ")]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 md:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Prost Alain ")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nombre personnes")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("5")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 19 22 13 09")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black text-md " }, [
                        _vm._v(" alain.prost@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("N° Table")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c("option", { attrs: { disabled: "" } }, [
                              _vm._v("Choix table")
                            ]),
                            _c("option", { attrs: { value: "1" } }, [
                              _vm._v("1")
                            ]),
                            _c("option", { attrs: { value: "2" } }, [
                              _vm._v("2")
                            ]),
                            _c("option", { attrs: { value: "3" } }, [
                              _vm._v("3")
                            ]),
                            _c("option", { attrs: { value: "4" } }, [
                              _vm._v("4")
                            ]),
                            _c("option", { attrs: { value: "5" } }, [
                              _vm._v("5")
                            ]),
                            _c("option", { attrs: { value: "6" } }, [
                              _vm._v("6")
                            ]),
                            _c(
                              "option",
                              { attrs: { value: "7", selected: "" } },
                              [_vm._v("7")]
                            ),
                            _c("option", { attrs: { value: "8" } }, [
                              _vm._v("8")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Serveur")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c(
                              "option",
                              { attrs: { disabled: "", selected: "" } },
                              [_vm._v("Choix serveur")]
                            ),
                            _c("option", { attrs: { value: "Max" } }, [
                              _vm._v("Max")
                            ]),
                            _c(
                              "option",
                              { attrs: { value: "Pat", selected: "" } },
                              [_vm._v("Pat")]
                            ),
                            _c("option", { attrs: { value: "Lisa" } }, [
                              _vm._v("Lisa")
                            ]),
                            _c("option", { attrs: { value: "Loulou" } }, [
                              _vm._v("Loulou")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("STATUT")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-green-800 text-md bg-green-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" Confirmée ")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("ANNULER")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-black text-md text-red-800 text-md bg-red-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" X ")]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "tr",
                {
                  staticClass:
                    "bg-gray-200 md:bg-white lg:hover:bg-gray-100 flex lg:table-row flex-row lg:flex-row flex-wrap lg:flex-no-wrap mb-40 lg:mb-0"
                },
                [
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nom Prénom")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v(" Alesi Jean ")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Nombre personnes")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("3")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Téléphone")]
                      ),
                      _c("span", { staticClass: "text-black  text-md" }, [
                        _vm._v("+33 6 57 10 89 37")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("E-mail")]
                      ),
                      _c("span", { staticClass: "text-black text-md " }, [
                        _vm._v(" jean.alesi@gmail.com")
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("N° Table")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c("option", { attrs: { disabled: "" } }, [
                              _vm._v("Choix table")
                            ]),
                            _c("option", { attrs: { value: "1" } }, [
                              _vm._v("1")
                            ]),
                            _c("option", { attrs: { value: "2" } }, [
                              _vm._v("2")
                            ]),
                            _c("option", { attrs: { value: "3" } }, [
                              _vm._v("3")
                            ]),
                            _c(
                              "option",
                              { attrs: { value: "4", selected: "" } },
                              [_vm._v("4")]
                            ),
                            _c("option", { attrs: { value: "5" } }, [
                              _vm._v("5")
                            ]),
                            _c("option", { attrs: { value: "6" } }, [
                              _vm._v("6")
                            ]),
                            _c("option", { attrs: { value: "7" } }, [
                              _vm._v("7")
                            ]),
                            _c("option", { attrs: { value: "8" } }, [
                              _vm._v("8")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("Serveur")]
                      ),
                      _c("span", [
                        _c(
                          "select",
                          {
                            staticClass:
                              "mt-10 md:mt-0 block w-full py-3 px-4 leading-tight text-gray-700 bg-gray-50 focus:bg-white border border-gray-300 focus:border-gray-500 rounded focus:outline-none",
                            attrs: { required: "", name: "subject" }
                          },
                          [
                            _c(
                              "option",
                              { attrs: { disabled: "", selected: "" } },
                              [_vm._v("Choix serveur")]
                            ),
                            _c("option", { attrs: { value: "Max" } }, [
                              _vm._v("Max")
                            ]),
                            _c("option", { attrs: { value: "Pat" } }, [
                              _vm._v("Pat")
                            ]),
                            _c("option", { attrs: { value: "Lisa" } }, [
                              _vm._v("Lisa")
                            ]),
                            _c(
                              "option",
                              { attrs: { value: "Loulou", selected: "" } },
                              [_vm._v("Loulou")]
                            )
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("STATUT")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-red-800 text-md bg-red-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" Annulée ")]
                      )
                    ]
                  ),
                  _c(
                    "td",
                    {
                      staticClass:
                        "w-full lg:w-auto p-3 text-gray-800 text-center  border-t md:border border-gray-300 text-center block lg:table-cell relative lg:static"
                    },
                    [
                      _c(
                        "span",
                        {
                          staticClass:
                            "lg:hidden absolute top-0 left-0 bg-blue-200 px-2 py-1 text-xs font-bold uppercase"
                        },
                        [_vm._v("ANNULER")]
                      ),
                      _c(
                        "span",
                        {
                          staticClass:
                            "text-black text-md text-red-800 text-md bg-red-300 rounded-full px-2 py-2"
                        },
                        [_vm._v(" X ")]
                      )
                    ]
                  )
                ]
              )
            ])
          ]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", {}, [
      _c("section", { staticClass: "py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c(
            "h2",
            { staticClass: "fade-in text-3xl font-semibold text-center" },
            [_vm._v("Obtenez et affichez les avis de vos clients.")]
          )
        ])
      ]),
      _c("section", { staticClass: "container px-4 mx-auto  pb-40" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c("div", { staticClass: "lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0" }, [
            _c("div", { staticClass: "flex flex-wrap" }, [
              _c(
                "h2",
                { staticClass: "text-2xl xl:text-3xl font-semibold pr-2" },
                [_vm._v(" Avis clients ")]
              ),
              _c("img", {
                staticClass: "h-6 xl:h-8 pr-1 mt-2 md:mt-0",
                attrs: { src: require("../assets/emoji/star.png"), alt: "" }
              }),
              _c("img", {
                staticClass: "h-6 xl:h-8 pr-1 mt-2 md:mt-0",
                attrs: { src: require("../assets/emoji/star.png"), alt: "" }
              }),
              _c("img", {
                staticClass: "h-6 xl:h-8 pr-1 mt-2 md:mt-0",
                attrs: { src: require("../assets/emoji/star.png"), alt: "" }
              }),
              _c("img", {
                staticClass: "h-6 xl:h-8 pr-1 mt-2 md:mt-0",
                attrs: { src: require("../assets/emoji/star.png"), alt: "" }
              }),
              _c("img", {
                staticClass: "h-6 xl:h-8 mt-2 md:mt-0",
                attrs: { src: require("../assets/emoji/star.png"), alt: "" }
              })
            ]),
            _c(
              "p",
              { staticClass: "fade-in text-yellow-500", attrs: { href: "#" } },
              [_vm._v("Admirez l'éloge fait au sujet de votre établissement")]
            )
          ]),
          _c("div", { staticClass: "lg:w-3/5 px-2  text-justify" }, [
            _c("p", [
              _vm._v(
                "Obtenez les avis de vos clients et affichez les pour tous vos futurs visiteurs, cela leur donnera probablement envie d'en savoir plus sur le service que vous proposez!"
              )
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "bg-marine-dark" }, [
      _c("section", { staticClass: "py-20 px-4 " }, [
        _c("div", { staticClass: "max-w-3xl mx-auto" }, [
          _c(
            "h2",
            {
              staticClass:
                "fade-in text-3xl font-semibold text-center text-white"
            },
            [
              _vm._v(
                "Regroupez toutes vos news et publications au même endroit!"
              )
            ]
          )
        ])
      ]),
      _c("section", { staticClass: "container px-4 mx-auto  pb-20" }, [
        _c("div", { staticClass: "flex flex-wrap -mx-2" }, [
          _c("div", { staticClass: "lg:w-2/5 px-2 lg:pr-16 mb-6 lg:mb-0" }, [
            _c("div", { staticClass: "fade-in flex flex-wrap" }, [
              _c(
                "h2",
                {
                  staticClass: "text-2xl xl:text-3xl font-semibold text-beige"
                },
                [_vm._v(" Réseaux sociaux ")]
              ),
              _c("img", {
                staticClass: "h-12 md:w-12 mx-2 mb-2",
                attrs: { src: require("../assets/emoji/cam.png"), alt: "" }
              })
            ]),
            _c("p", { staticClass: "text-yellow-500", attrs: { href: "#" } }, [
              _vm._v("Affichez en temps réel vos dernières publications ")
            ])
          ]),
          _c(
            "div",
            { staticClass: "fade-in lg:w-3/5 px-2  text-justify text-white" },
            [
              _c("p", [
                _vm._v(
                  "Liez le ou les réseaux sur lesquels vous êtes le plus actif et voyez votre activité partagée automatiquement sur le flux de votre site! Cela vous évite de devoir tout publier en double tout en regroupant le plus important."
                )
              ])
            ]
          )
        ]),
        _c("div", { staticClass: "mb-20" })
      ]),
      _c("div", { staticClass: "container mx-auto px-4 border-b" })
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}