{"remainingRequest":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Devis.vue?vue&type=template&id=55d08eb5&","dependencies":[{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Devis.vue","mtime":1612547942913},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}