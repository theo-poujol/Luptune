{"remainingRequest":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Devis.vue?vue&type=template&id=55d08eb5&","dependencies":[{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/src/views/Devis.vue","mtime":1612302051354},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/GIt/Luptune/luptune/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9IkRldmlzIGJnLW1hcmluZS1kYXJrIj4KCgo8ZGl2IGNsYXNzPSJiZy1vcGFjaXR5LTAiPgogIDxzZWN0aW9uIGNsYXNzPSJweS0yMCBweC00IHRleHQtY2VudGVyIj4KICAgIDxkaXYgY2xhc3M9InctZnVsbCBtYXgtdy0yeGwgbXgtYXV0byI+CiAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgdGV4dC1iZWlnZSI+PGgxPkVTVElNRVogVk9UUkUgREVWSVM8L2gxPjwvc3Bhbj4KICAgICAgPGgyIGNsYXNzPSJ0ZXh0LTV4bCBtdC0yIG1iLTYgbGVhZGluZy10aWdodCBmb250LXNlbWlib2xkIGZvbnQtaGVhZGluZyB0ZXh0LXdoaXRlIj5VbiBkZXZpcyDDoCBsJ2VzdGltZSBkZSB2b3RyZSByZXN0YXVyYW50PC9oMj4KICAgICAgPHAgY2xhc3M9InRleHQtaW5kaWdvLTYwMCBmb250LXNlbWlib2xkICIgaHJlZj0iIyI+Q29tbWVuY2V6IGTDqHMgbWFpbnRlbmFudCBsYSBkaWdpdGFsaXNhdGlvbiBkZSB2b3RyZSByZXN0YXVyYW50IDwvcD4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KPC9kaXY+CgoKCiAgPCEtLSByYXBwZWwgZGV2aXMgLS0+CiAgPGRpdiBjbGFzcz0iIj4KICAgIDxzZWN0aW9uIGlkPSJhYm91dCIgY2xhc3M9ImNvbnRhaW5lciBteC1hdXRvIHB5LTggcHgtNCB0ZXh0LWNlbnRlciI+CgogICAgICA8aDIgY2xhc3M9InRleHQtNHhsIG1iLTIgbGVhZGluZy10aWdodCBmb250LXNlbWlib2xkIGZvbnQtaGVhZGluZyBtYi0xMCB0ZXh0LXdoaXRlIj5Db21tZW50IMOnYSBtYXJjaGU/PC9oMj4KCiAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtZDp3LTEvMyBwLTgiPgoKICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTQiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmxleCB3LTE2IGgtMTYgbXgtYXV0byBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC0yeGwgZm9udC1ib2xkIGZvbnQtaGVhZGluZyByb3VuZGVkLWZ1bGwgYmctYmVpZ2UgdGV4dC1tYXJpbmUtZGFyayI+MTwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz0ibXktNCB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1iZWlnZSI+Q3VzdG9taXNleiB2b3RyZSBzaXRlIHNlbG9uIHZvcyBlbnZpZXM8L2gzPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1ibHVlR3JheS00MDAgbGVhZGluZy1sb29zZSB0ZXh0LWdyYXktNDAwIj5DaG9pc2lzc2V6IGNoYXF1ZSBmb25jdGlvbm5hbGl0w6kgc291aGFpdMOpZSBhaW5zaSBxdWUgbGUgc3R5bGUgZGUgdm90cmUgc2l0ZSwgdm91cyBwb3V2ZXogw6lnYWxlbWVudCBuZSBjaG9pc2lyCiAgICAgICAgICAgIHF1J3VuZSBmb25jdGlvbm5hbGl0w6kgcXVlIG5vdXMgYWpvdXRlcm9ucyDDoCB2b3RyZSBzaXRlIGTDqWrDoCBleGlzdGFudDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJtZDp3LTEvMyBwLTgiPgoKICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTQiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmxleCB3LTE2IGgtMTYgbXgtYXV0byBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC0yeGwgZm9udC1ib2xkIGZvbnQtaGVhZGluZyByb3VuZGVkLWZ1bGwgYmctYmVpZ2UgdGV4dC1tYXJpbmUtZGFyayI+Mjwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz0ibXktNCB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1iZWlnZSI+RXN0aW1leiB2b3RyZSBkZXZpczwvaDM+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWJsdWVHcmF5LTQwMCBsZWFkaW5nLWxvb3NlIHRleHQtZ3JheS00MDAiPlZvdXMgcG91cnJleiB2b2lyIHVuZSBlc3RpbWF0aW9uIGVuIGRpcmVjdCBkdSBjb8O7dCBkdSBzaXRlIHF1ZSB2b3VzIHNvdWhhaXRlejwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJtZDp3LTEvMyBwLTgiPgoKICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTQiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmxleCB3LTE2IGgtMTYgbXgtYXV0byBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC0yeGwgZm9udC1ib2xkIGZvbnQtaGVhZGluZyByb3VuZGVkLWZ1bGwgYmctYmVpZ2UgdGV4dC1tYXJpbmUtZGFyayI+Mzwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz0ibXktNCB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1iZWlnZSI+Q29udGFjdGV6LW5vdXMhPC9oMz4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtYmx1ZUdyYXktNDAwIGxlYWRpbmctbG9vc2UgdGV4dC1ncmF5LTQwMCI+Vm91cyBzb3VoYWl0ZXogcGx1cyBkZSBwcsOpY2lzaW9ucyA/IFZvdXMgc291aGFpdGV6IHVuZSBmb25jdGlvbm5hbGl0w6kgbm9uIHByw6lzZW50ZSBzdXIgbm90cmUgc2l0ZSA/IE4nYXR0ZW5kZXoKICAgICAgICAgICAgcGFzIGV0IGNvbnRhY3Rlei1ub3VzIGTDqHMgbWFpbnRlbmFudDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweS0xMCBweC00IGJvcmRlci1iIj4KICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgPC9kaXY+CgoKCiAgPGRpdiBjbGFzcz0iIj4KICAgIDxzZWN0aW9uIGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC00IGZsZXggZmxleC13cmFwIHB5LTIwIj4KCiAgICAgIDxkaXYgY2xhc3M9Im1kOnctMS8zIj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtYmVpZ2UgZm9udC1zZW1pYm9sZCB0ZXh0LTN4bCI+U3R5bGUgZHUgc2l0ZTwvc3Bhbj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTIiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBtbC02Ij4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiB2YWx1ZT0iTW9kZXJuZSIgdi1tb2RlbD0iY2Jfc3R5bGUiIEBjaGFuZ2U9InVuaXF1ZUNoZWNrIj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5Nb2Rlcm5lPC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBtbC02Ij4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiB2YWx1ZT0iQ2xhc3NpcXVlIiB2LW1vZGVsPSJjYl9zdHlsZSIgQGNoYW5nZT0idW5pcXVlQ2hlY2siPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtbC0yIHRleHQtd2hpdGUiPkNsYXNzaXF1ZTwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPGJyLz4KCiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im10LTQgbXQtMTAiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtYmVpZ2UgZm9udC1zZW1pYm9sZCB0ZXh0LTN4bCI+Rm9uY3Rpb25uYWxpdMOpczwvc3Bhbj4KCiAgICAgICAgICA8aDIgY2xhc3M9InRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCB0ZXh0LXhsIG10LTUiPlNlcnZpY2VzPC9oMj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTIiPgogICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJmb25jMSIgdmFsdWU9IkNvbW1hbmRlcyBlbiBsaWduZSIgdi1tb2RlbD0iY2JfZGV2aXMiIEBjaGFuZ2U9ImFkZFRvdGFsIiAgPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1sLTIgdGV4dC13aGl0ZSI+Q29tbWFuZGVzIGVuIGxpZ25lIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWJlaWdlIG1sLTEgIj4gKENsaWNrICYgQ29sbGVjdCBldCBwYWllbWVudCBlbiBsaWduZSkgPC9wPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KICAgICAgICAgICAgICA8bGk+PGxhYmVsIGNsYXNzPSJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgbWwtNiBweS0xIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJmb25jMyIgdmFsdWU9Ikdlc3Rpb24gZmljaGVzIGNsaWVudHMiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIiA+R2VzdGlvbiBmaWNoZXMgY2xpZW50czwvc3Bhbj4KICAgICAgICAgICAgICA8L2xhYmVsPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJmb25jNCIgdmFsdWU9Ikdlc3Rpb24gZGVzIHLDqXNlcnZhdGlvbnMiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5HZXN0aW9uIGRlcyByw6lzZXJ2YXRpb25zIDwvc3Bhbj4KICAgICAgICAgICAgICA8L2xhYmVsPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJmb25jNSIgdmFsdWU9IkjDqWJlcmdlbWVudCBXZWIiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5Iw6liZXJnZW1lbnQgV2ViPC9zcGFuPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtYmVpZ2UgbWwtMSAiPiAoQ29jaGV6IHNpIHZvdXMgbidhdmV6IHBhcyBkZSBzaXRlIGludGVybmV0KSA8L3A+CiAgICAgICAgICAgICAgPC9sYWJlbD48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgIDxoMiBjbGFzcz0iZm9udC1zZW1pYm9sZCB0ZXh0LXhsIG10LTUgdGV4dC13aGl0ZSI+T3B0aW9uczwvaDI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgIDxsaT48bGFiZWwgY2xhc3M9ImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBtbC02IHB5LTEiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBjbGFzcz0iZm9ybS1jaGVja2JveCIgbmFtZT0ib3AxIiB2YWx1ZT0iQXZpcyBjbGllbnRzIiB2LW1vZGVsPSJjYl9kZXZpcyIgQGNoYW5nZT0iYWRkVG90YWwiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1sLTIgdGV4dC13aGl0ZSI+QXZpcyBjbGllbnRzPC9zcGFuPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KCiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJvcDIiIHZhbHVlPSJQYXJ0YWdlIGRlcHVpcyB2b3MgcsOpc2VhdXggc29jaWF1eCIgdi1tb2RlbD0iY2JfZGV2aXMiIEBjaGFuZ2U9ImFkZFRvdGFsIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtbC0yIHRleHQtd2hpdGUiPlBhcnRhZ2UgZGVwdWlzIHZvcyByw6lzZWF1eCBzb2NpYXV4PC9zcGFuPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KCiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJvcDMiIHZhbHVlPSJJbnTDqWdyYXRpb24gZGUgdm90cmUgYWRyZXNzZSBzdXIgY2FydGUiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5JbnTDqWdyYXRpb24gZGUgdm90cmUgYWRyZXNzZSBzdXIgY2FydGUgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KCiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJvcDQiIHZhbHVlPSJNZW51IGVuIFFSIENvZGUiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5NZW51IGVuIFFSIENvZGUgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KCiAgICAgICAgICAgICAgPGxpPjxsYWJlbCBjbGFzcz0iaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIG1sLTYgcHktMSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJmb3JtLWNoZWNrYm94IiBuYW1lPSJvcDUiIHZhbHVlPSJGb3JtdWxhaXJlIGRlIGNvbnRhY3QiIHYtbW9kZWw9ImNiX2RldmlzIiBAY2hhbmdlPSJhZGRUb3RhbCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWwtMiB0ZXh0LXdoaXRlIj5Gb3JtdWxhaXJlIGRlIGNvbnRhY3QgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGFiZWw+PC9saT4KCgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKCgogICAgICA8ZGl2IGNsYXNzPSJweS0xMCB3LWZ1bGwgbWQ6dy0yLzMgbWQ6cHktMCBtZDpwbC0xMCI+CgoKICAgICAgICA8IS0tIGNvbXBvbmVudCAtLT4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy1tYXJpbmUtZGFyayBweC00IHB5LTUgYm9yZGVyIHJvdW5kZWQtdCBzbTpweC02Ij4KICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LWxnIGxlYWRpbmctNiBmb250LW1lZGl1bSB0ZXh0LXdoaXRlIj4KICAgICAgICAgICAgICBEw6l0YWlsIGR1IHRhcmlmIGVzdGltw6kKICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtZ3JheS0zMDAgdGV4dC1zbSI+CiAgICAgICAgICAgICAgKGNlIHByaXggZXN0IHVuZSBlc3RpbWF0aW9uLCBiZWF1Y291cCBkZSBwYXJhbcOodHJlcyBwZXV2ZW50IGNoYW5nZXIgY2VsdWktY2kgc2UgcmFwcHJvY2hlIGRlIGxhIHLDqWFsaXTDqSkKICAgICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZSBzaGFkb3cgb3ZlcmZsb3ctaGlkZGVuIHNtOnJvdW5kZWQtYiI+CiAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGl2aWRlLXkgZGl2aWRlLWdyYXktMjUwIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC00IHB5LTQgc206cHgtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIGZvbnQtdGhpbiB0ZXh0LWdyYXktNzAwIHRydW5jYXRlIGZvbnQtc2VtaWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaG9peAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtMiBmbGV4LXNocmluay0wIGZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHgtMiBpbmxpbmUtZmxleCB0ZXh0LXhzIGxlYWRpbmctNSBmb250LXNlbWlib2xkICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgIDxsaSB2LWZvcj0iaXRlbSBpbiBjYl9zdHlsZSIgOmtleT0iaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYmxvY2sgaG92ZXI6YmctZ3JheS0yMDAiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC00IHB5LTQgc206cHgtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj0ibWFwIGluIHByaWNlX21hcCIgOmtleT0ibWFwIiBjbGFzcz0iZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHYtaWY9Iml0ZW0gPT0gbWFwWzBdIiBjbGFzcz0idGV4dC1zbSBmb250LXRoaW4gdGV4dC1ncmF5LTcwMCB0cnVuY2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7aXRlbX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJpdGVtID09IG1hcFswXSIgIGNsYXNzPSJwci0yIG1sLTIgZmxleC1zaHJpbmstMCBmbGV4IGlubGluZS1mbGV4IHRleHQteHMgbGVhZGluZy01IGZvbnQtc2VtaWJvbGQgdGV4dC1ncmVlbi02MDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e21hcFsxXSArICcg4oKsJ319CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgdi1mb3I9Iml0ZW0gaW4gY2JfZGV2aXMiIDprZXk9Iml0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJsb2NrIGhvdmVyOmJnLWdyYXktMjAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCBweS00IHNtOnB4LTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9Im1hcCBpbiBwcmljZV9tYXAiIDprZXk9Im1hcCIgY2xhc3M9ImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCB2LWlmPSJpdGVtID09IG1hcFswXSIgY2xhc3M9InRleHQtc20gZm9udC10aGluIHRleHQtZ3JheS03MDAgdHJ1bmNhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0iaXRlbSA9PSBtYXBbMF0iICBjbGFzcz0icHItMiBtbC0yIGZsZXgtc2hyaW5rLTAgZmxleCBpbmxpbmUtZmxleCB0ZXh0LXhzIGxlYWRpbmctNSBmb250LXNlbWlib2xkIHRleHQtZ3JlZW4tNjAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3ttYXBbMV0gKyAnIOKCrCd9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJsb2NrIGhvdmVyOmJnLWdyYXktNTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC00IHB5LTQgc206cHgtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW1kIHRleHQtYmxhY2sgdHJ1bmNhdGUgZm9udC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVE9UQUwgRVNUSU3DiQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtMiBmbGV4LXNocmluay0wIGZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHgtMiBpbmxpbmUtZmxleCB0ZXh0LW1kIGxlYWRpbmctNSBmb250LWJvbGQgcm91bmRlZC1mdWxsIGJnLWdyZWVuLTEwMCB0ZXh0LWdyZWVuLTgwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t0b3RhbCArICcg4oKsJ319CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgIDwvc2VjdGlvbj4KICAgIDxici8+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC00IGJvcmRlci1iIj4KICAgIDwvZGl2PgogIDwvZGl2PgoKCgoKICA8IS0tIGNvbnRhY3QgLS0+CgoKICA8ZGl2IGNsYXNzPSJiZy1tYXJpbmUtZGFyayBoLTEiPgoKICA8L2Rpdj4KICA8Q29udGFjdD48L0NvbnRhY3Q+Cgo8L2Rpdj4K"},null]}