{"remainingRequest":"/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/theopoujol/Documents/Projets/Luptune/luptune/src/views/Devis.vue?vue&type=template&id=55d08eb5&","dependencies":[{"path":"/Users/theopoujol/Documents/Projets/Luptune/luptune/src/views/Devis.vue","mtime":1612201924981},{"path":"/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theopoujol/Documents/Projets/Luptune/luptune/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}